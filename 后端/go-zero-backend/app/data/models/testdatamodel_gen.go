// Code generated by goctl. DO NOT EDIT!

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	testDataFieldNames          = builder.RawFieldNames(&TestData{}, true)
	testDataRows                = strings.Join(testDataFieldNames, ",")
	testDataRowsExpectAutoSet   = strings.Join(stringx.Remove(testDataFieldNames, "create_time", "update_time"), ",")
	testDataRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(testDataFieldNames, "id", "create_time", "update_time"))

	cachePublicTestDataIdPrefix = "cache:public:testData:id:"
)

type (
	testDataModel interface {
		Insert(ctx context.Context, data *TestData) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TestData, error)
		Update(ctx context.Context, data *TestData) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTestDataModel struct {
		sqlc.CachedConn
		table string
	}

	TestData struct {
		Id        int64     `db:"id"`
		Username  string    `db:"username"`
		Type      string    `db:"type"`
		CreatedAt time.Time `db:"created_at"`
		StudentId string    `db:"student_id"`
		Selection string    `db:"selection"`
	}
)

func newTestDataModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTestDataModel {
	return &defaultTestDataModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."test_data"`,
	}
}

func (m *defaultTestDataModel) Insert(ctx context.Context, data *TestData) (sql.Result, error) {
	publicTestDataIdKey := fmt.Sprintf("%s%v", cachePublicTestDataIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, testDataRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Username, data.Type, data.CreatedAt, data.StudentId, data.Selection)
	}, publicTestDataIdKey)
	return ret, err
}

func (m *defaultTestDataModel) FindOne(ctx context.Context, id int64) (*TestData, error) {
	publicTestDataIdKey := fmt.Sprintf("%s%v", cachePublicTestDataIdPrefix, id)
	var resp TestData
	err := m.QueryRowCtx(ctx, &resp, publicTestDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", testDataRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTestDataModel) Update(ctx context.Context, data *TestData) error {
	publicTestDataIdKey := fmt.Sprintf("%s%v", cachePublicTestDataIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, testDataRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Username, data.Type, data.CreatedAt, data.StudentId, data.Selection)
	}, publicTestDataIdKey)
	return err
}

func (m *defaultTestDataModel) Delete(ctx context.Context, id int64) error {
	publicTestDataIdKey := fmt.Sprintf("%s%v", cachePublicTestDataIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicTestDataIdKey)
	return err
}

func (m *defaultTestDataModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicTestDataIdPrefix, primary)
}

func (m *defaultTestDataModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", testDataRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTestDataModel) tableName() string {
	return m.table
}
