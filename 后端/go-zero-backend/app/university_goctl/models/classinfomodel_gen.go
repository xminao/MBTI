// Code generated by goctl. DO NOT EDIT!

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	classInfoFieldNames          = builder.RawFieldNames(&ClassInfo{}, true)
	classInfoRows                = strings.Join(classInfoFieldNames, ",")
	classInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(classInfoFieldNames, "create_time", "update_time"), ",")
	classInfoRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(classInfoFieldNames, "class_id", "create_time", "update_time"))

	cachePublicClassInfoClassIdPrefix                       = "cache:public:classInfo:classId:"
	cachePublicClassInfoClassIdCollegeIdYearIdMajorIdPrefix = "cache:public:classInfo:classId:collegeId:yearId:majorId:"
	cachePublicClassInfoClassNamePrefix                     = "cache:public:classInfo:className:"
)

type (
	classInfoModel interface {
		Insert(ctx context.Context, data *ClassInfo) (sql.Result, error)
		FindOne(ctx context.Context, classId int64) (*ClassInfo, error)
		FindOneByClassIdCollegeIdYearIdMajorId(ctx context.Context, classId int64, collegeId int64, yearId int64, majorId int64) (*ClassInfo, error)
		FindOneByClassName(ctx context.Context, className string) (*ClassInfo, error)
		Update(ctx context.Context, data *ClassInfo) error
		Delete(ctx context.Context, classId int64) error
	}

	defaultClassInfoModel struct {
		sqlc.CachedConn
		table string
	}

	ClassInfo struct {
		ClassId   int64     `db:"class_id"`   // 班级编号
		ClassName string    `db:"class_name"` // 班级名称
		CollegeId int64     `db:"college_id"` // 所属学院
		YearId    int64     `db:"year_id"`    // 年级年级
		MajorId   int64     `db:"major_id"`   // 所属专业
		CreatedAt time.Time `db:"created_at"`
	}
)

func newClassInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultClassInfoModel {
	return &defaultClassInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."class_info"`,
	}
}

func (m *defaultClassInfoModel) Insert(ctx context.Context, data *ClassInfo) (sql.Result, error) {
	publicClassInfoClassIdCollegeIdYearIdMajorIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cachePublicClassInfoClassIdCollegeIdYearIdMajorIdPrefix, data.ClassId, data.CollegeId, data.YearId, data.MajorId)
	publicClassInfoClassIdKey := fmt.Sprintf("%s%v", cachePublicClassInfoClassIdPrefix, data.ClassId)
	publicClassInfoClassNameKey := fmt.Sprintf("%s%v", cachePublicClassInfoClassNamePrefix, data.ClassName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, classInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ClassId, data.ClassName, data.CollegeId, data.YearId, data.MajorId, data.CreatedAt)
	}, publicClassInfoClassIdCollegeIdYearIdMajorIdKey, publicClassInfoClassIdKey, publicClassInfoClassNameKey)
	return ret, err
}

func (m *defaultClassInfoModel) FindOne(ctx context.Context, classId int64) (*ClassInfo, error) {
	publicClassInfoClassIdKey := fmt.Sprintf("%s%v", cachePublicClassInfoClassIdPrefix, classId)
	var resp ClassInfo
	err := m.QueryRowCtx(ctx, &resp, publicClassInfoClassIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where class_id = $1 limit 1", classInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, classId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClassInfoModel) FindOneByClassIdCollegeIdYearIdMajorId(ctx context.Context, classId int64, collegeId int64, yearId int64, majorId int64) (*ClassInfo, error) {
	publicClassInfoClassIdCollegeIdYearIdMajorIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cachePublicClassInfoClassIdCollegeIdYearIdMajorIdPrefix, classId, collegeId, yearId, majorId)
	var resp ClassInfo
	err := m.QueryRowIndexCtx(ctx, &resp, publicClassInfoClassIdCollegeIdYearIdMajorIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where class_id = $1 and college_id = $2 and year_id = $3 and major_id = $4 limit 1", classInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, classId, collegeId, yearId, majorId); err != nil {
			return nil, err
		}
		return resp.ClassId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClassInfoModel) FindOneByClassName(ctx context.Context, className string) (*ClassInfo, error) {
	publicClassInfoClassNameKey := fmt.Sprintf("%s%v", cachePublicClassInfoClassNamePrefix, className)
	var resp ClassInfo
	err := m.QueryRowIndexCtx(ctx, &resp, publicClassInfoClassNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where class_name = $1 limit 1", classInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, className); err != nil {
			return nil, err
		}
		return resp.ClassId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClassInfoModel) Update(ctx context.Context, data *ClassInfo) error {
	publicClassInfoClassIdCollegeIdYearIdMajorIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cachePublicClassInfoClassIdCollegeIdYearIdMajorIdPrefix, data.ClassId, data.CollegeId, data.YearId, data.MajorId)
	publicClassInfoClassIdKey := fmt.Sprintf("%s%v", cachePublicClassInfoClassIdPrefix, data.ClassId)
	publicClassInfoClassNameKey := fmt.Sprintf("%s%v", cachePublicClassInfoClassNamePrefix, data.ClassName)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where class_id = $1", m.table, classInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ClassId, data.ClassName, data.CollegeId, data.YearId, data.MajorId, data.CreatedAt)
	}, publicClassInfoClassIdCollegeIdYearIdMajorIdKey, publicClassInfoClassIdKey, publicClassInfoClassNameKey)
	return err
}

func (m *defaultClassInfoModel) Delete(ctx context.Context, classId int64) error {
	data, err := m.FindOne(ctx, classId)
	if err != nil {
		return err
	}

	publicClassInfoClassIdCollegeIdYearIdMajorIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cachePublicClassInfoClassIdCollegeIdYearIdMajorIdPrefix, data.ClassId, data.CollegeId, data.YearId, data.MajorId)
	publicClassInfoClassIdKey := fmt.Sprintf("%s%v", cachePublicClassInfoClassIdPrefix, classId)
	publicClassInfoClassNameKey := fmt.Sprintf("%s%v", cachePublicClassInfoClassNamePrefix, data.ClassName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where class_id = $1", m.table)
		return conn.ExecCtx(ctx, query, classId)
	}, publicClassInfoClassIdCollegeIdYearIdMajorIdKey, publicClassInfoClassIdKey, publicClassInfoClassNameKey)
	return err
}

func (m *defaultClassInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicClassInfoClassIdPrefix, primary)
}

func (m *defaultClassInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where class_id = $1 limit 1", classInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultClassInfoModel) tableName() string {
	return m.table
}
