// Code generated by goctl. DO NOT EDIT!

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	studentInfoFieldNames          = builder.RawFieldNames(&StudentInfo{}, true)
	studentInfoRows                = strings.Join(studentInfoFieldNames, ",")
	studentInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(studentInfoFieldNames, "create_time", "update_time"), ",")
	studentInfoRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(studentInfoFieldNames, "student_id", "create_time", "update_time"))

	cachePublicStudentInfoStudentIdPrefix = "cache:public:studentInfo:studentId:"
)

type (
	studentInfoModel interface {
		Insert(ctx context.Context, data *StudentInfo) (sql.Result, error)
		FindOne(ctx context.Context, studentId string) (*StudentInfo, error)
		Update(ctx context.Context, data *StudentInfo) error
		Delete(ctx context.Context, studentId string) error
	}

	defaultStudentInfoModel struct {
		sqlc.CachedConn
		table string
	}

	StudentInfo struct {
		StudentId       string         `db:"student_id"`       // 学号
		StudentName     string         `db:"student_name"`     // 姓名
		CollegeId       int64          `db:"college_id"`       // 所属学院
		YearId          int64          `db:"year_id"`          // 年级
		MajorId         int64          `db:"major_id"`         // 专业
		ClassId         int64          `db:"class_id"`         // 所属班级
		IsBinding       bool           `db:"is_binding"`       // 是否绑定
		BindingUsername sql.NullString `db:"binding_username"` // 所绑用户
		CreatedAt       time.Time      `db:"created_at"`
	}
)

func newStudentInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultStudentInfoModel {
	return &defaultStudentInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."student_info"`,
	}
}

func (m *defaultStudentInfoModel) Insert(ctx context.Context, data *StudentInfo) (sql.Result, error) {
	publicStudentInfoStudentIdKey := fmt.Sprintf("%s%v", cachePublicStudentInfoStudentIdPrefix, data.StudentId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, studentInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.StudentId, data.StudentName, data.CollegeId, data.YearId, data.MajorId, data.ClassId, data.IsBinding, data.BindingUsername, data.CreatedAt)
	}, publicStudentInfoStudentIdKey)
	return ret, err
}

func (m *defaultStudentInfoModel) FindOne(ctx context.Context, studentId string) (*StudentInfo, error) {
	publicStudentInfoStudentIdKey := fmt.Sprintf("%s%v", cachePublicStudentInfoStudentIdPrefix, studentId)
	var resp StudentInfo
	err := m.QueryRowCtx(ctx, &resp, publicStudentInfoStudentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where student_id = $1 limit 1", studentInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, studentId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentInfoModel) Update(ctx context.Context, data *StudentInfo) error {
	publicStudentInfoStudentIdKey := fmt.Sprintf("%s%v", cachePublicStudentInfoStudentIdPrefix, data.StudentId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where student_id = $1", m.table, studentInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.StudentId, data.StudentName, data.CollegeId, data.YearId, data.MajorId, data.ClassId, data.IsBinding, data.BindingUsername, data.CreatedAt)
	}, publicStudentInfoStudentIdKey)
	return err
}

func (m *defaultStudentInfoModel) Delete(ctx context.Context, studentId string) error {
	publicStudentInfoStudentIdKey := fmt.Sprintf("%s%v", cachePublicStudentInfoStudentIdPrefix, studentId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where student_id = $1", m.table)
		return conn.ExecCtx(ctx, query, studentId)
	}, publicStudentInfoStudentIdKey)
	return err
}

func (m *defaultStudentInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicStudentInfoStudentIdPrefix, primary)
}

func (m *defaultStudentInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where student_id = $1 limit 1", studentInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStudentInfoModel) tableName() string {
	return m.table
}
