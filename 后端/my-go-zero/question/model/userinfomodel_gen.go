// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userInfoFieldNames          = builder.RawFieldNames(&UserInfo{}, true)
	userInfoRows                = strings.Join(userInfoFieldNames, ",")
	userInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userInfoFieldNames, "create_time", "update_time"), ",")
	userInfoRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userInfoFieldNames, "user_name", "create_time", "update_time"))

	cachePublicUserInfoUserNamePrefix = "cache:public:userInfo:userName:"
)

type (
	userInfoModel interface {
		Insert(ctx context.Context, data *UserInfo) (sql.Result, error)
		FindOne(ctx context.Context, userName string) (*UserInfo, error)
		Update(ctx context.Context, data *UserInfo) error
		Delete(ctx context.Context, userName string) error
	}

	defaultUserInfoModel struct {
		sqlc.CachedConn
		table string
	}

	UserInfo struct {
		UserName string `db:"user_name"` // 用户名
		NickName string `db:"nick_name"` // 昵称
		Password string `db:"password"`  // 密码
		Gender   string `db:"gender"`    // 性别
	}
)

func newUserInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserInfoModel {
	return &defaultUserInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."user_info"`,
	}
}

func (m *defaultUserInfoModel) Insert(ctx context.Context, data *UserInfo) (sql.Result, error) {
	publicUserInfoUserNameKey := fmt.Sprintf("%s%v", cachePublicUserInfoUserNamePrefix, data.UserName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, userInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserName, data.NickName, data.Password, data.Gender)
	}, publicUserInfoUserNameKey)
	return ret, err
}

func (m *defaultUserInfoModel) FindOne(ctx context.Context, userName string) (*UserInfo, error) {
	publicUserInfoUserNameKey := fmt.Sprintf("%s%v", cachePublicUserInfoUserNamePrefix, userName)
	var resp UserInfo
	err := m.QueryRowCtx(ctx, &resp, publicUserInfoUserNameKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where user_name = $1 limit 1", userInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userName)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) Update(ctx context.Context, data *UserInfo) error {
	publicUserInfoUserNameKey := fmt.Sprintf("%s%v", cachePublicUserInfoUserNamePrefix, data.UserName)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where user_name = $1", m.table, userInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserName, data.NickName, data.Password, data.Gender)
	}, publicUserInfoUserNameKey)
	return err
}

func (m *defaultUserInfoModel) Delete(ctx context.Context, userName string) error {
	publicUserInfoUserNameKey := fmt.Sprintf("%s%v", cachePublicUserInfoUserNamePrefix, userName)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where user_name = $1", m.table)
		return conn.ExecCtx(ctx, query, userName)
	}, publicUserInfoUserNameKey)
	return err
}

func (m *defaultUserInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicUserInfoUserNamePrefix, primary)
}

func (m *defaultUserInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where user_name = $1 limit 1", userInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserInfoModel) tableName() string {
	return m.table
}
